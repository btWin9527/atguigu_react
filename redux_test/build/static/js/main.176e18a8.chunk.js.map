{"version":3,"sources":["redux/constant.js","redux/actions/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","increment","data","type","Count","value","selectNumber","props","decrement","incrementIfOdd","count","incrementAsync","this","personNum","name","id","ref","c","onClick","Component","mapDispatchToProps","time","dispatch","setTimeout","connect","state","person","length","Person","addPerson","personObj","nanoid","nameRef","age","ageRef","sum","placeholder","personList","map","App","initState","combineReducers","preState","action","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.176e18a8.chunk.js","sourcesContent":["/*\r\n* 该模块用于定义action对象中type类型的常量值\r\n* */\r\n\r\nexport const INCREMENT = 'increment';\r\nexport const DECREMENT = 'decrement';\r\nexport const ADD_PERSON = 'add_person'\r\n","/*\r\n* 该文件专门为Count组件生成action对象\r\n* 异步action 返回函数\r\n* 同步action 返回对象\r\n* */\r\nimport {INCREMENT, DECREMENT} from \"../constant\";\r\n// 同步action\r\nexport const increment = (data) => ({type: INCREMENT, data})\r\n\r\nexport const decrement = (data) => ({type: DECREMENT, data})\r\n\r\n// 异步action( 异步action中一般会调用同步action)\r\nexport const incrementAsync = (data, time) => {\r\n  return dispatch => {\r\n    setTimeout(() => {\r\n      dispatch(increment(data)); // 通知redux加data\r\n    }, time)\r\n  }\r\n}\r\n","// 引入connect连接ui组件与redux\r\nimport React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {decrement, increment, incrementAsync} from \"../../redux/actions/count\";\r\n\r\nclass Count extends Component {\r\n\r\n  // 加法\r\n  increment = () => {\r\n    const {value} = this.selectNumber;\r\n    this.props.increment(value * 1);\r\n  }\r\n  // 减法\r\n  decrement = () => {\r\n    const {value} = this.selectNumber;\r\n    this.props.decrement(value * 1);\r\n  }\r\n  // 奇数再加\r\n  incrementIfOdd = () => {\r\n    const {value} = this.selectNumber;\r\n    let {count} = this.props;\r\n    if (count % 2 !== 0) {\r\n      this.props.increment(value * 1);\r\n    }\r\n  }\r\n  // 异步加\r\n  incrementAsync = () => {\r\n    const {value} = this.selectNumber;\r\n    this.props.incrementAsync(value * 1, 500);\r\n  }\r\n\r\n  render() {\r\n    let {count, personNum} = this.props;\r\n    return (\r\n      <div>\r\n        <h1>当前求和为: {count}</h1>\r\n        <h3>下方组件人数{personNum}</h3>\r\n        <select name=\"\" id=\"\" ref={c => this.selectNumber = c}>\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n        </select>\r\n        &nbsp;&nbsp;\r\n        <button onClick={this.increment}>+</button>\r\n        &nbsp;\r\n        <button onClick={this.decrement}>-</button>\r\n        &nbsp;\r\n        <button onClick={this.incrementIfOdd}>当前求和奇数再加</button>\r\n        &nbsp;\r\n        <button onClick={this.incrementAsync}>异步加</button>\r\n        &nbsp;\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 映射状态\r\nconst mapStateToProps = (state) => ({\r\n  count: state.count,\r\n  personNum: state.person.length,\r\n})\r\n\r\n// 映射操作状态的方法 对象写法配置\r\nconst mapDispatchToProps = {\r\n  increment,\r\n  decrement,\r\n  incrementAsync\r\n}\r\n\r\n// 使用connect()()创建并暴露一个Count容器组件\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Count);\r\n","import React, {Component} from 'react';\r\nimport {nanoid} from 'nanoid';\r\nimport {connect} from 'react-redux'\r\nimport {addPerson} from \"../../redux/actions/person\";\r\n\r\nclass Person extends Component {\r\n\r\n  addPerson = () => {\r\n    const personObj = {\r\n      id: nanoid(),\r\n      name: this.nameRef.value,\r\n      age: this.ageRef.value\r\n    }\r\n    this.props.addPerson(personObj)\r\n    this.nameRef.value = '';\r\n    this.ageRef.value = '';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Person组件</h2>\r\n        <h3>上方求和为{this.props.sum}</h3>\r\n        <input type=\"text\" placeholder=\"输入名字\" ref={c => this.nameRef = c}/>\r\n        <input type=\"text\" placeholder=\"输入年龄\" ref={c => this.ageRef = c}/>\r\n        <button onClick={this.addPerson}>添加</button>\r\n        <ul>\r\n          {this.props.personList.map((person) => <li key={person.id}>名字{person.name} -- 年龄{person.age}</li>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({\r\n  personList: state.person,\r\n  sum: state.count\r\n}), {\r\n  addPerson\r\n})(Person);\r\n","import {ADD_PERSON} from \"../constant\";\r\n\r\nexport const addPerson = (personObj) => ({\r\n  type: ADD_PERSON,\r\n  data: personObj\r\n})\r\n\r\n","import React, {Component} from 'react';\r\nimport Count from \"./containers/Count\";\r\nimport Person from \"./containers/Person\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* 给容器组件传递store */}\r\n        <Count/>\r\n        <Person/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import {ADD_PERSON} from \"../constant\";\r\n\r\nconst initState = [\r\n  {name: 'tom', age: 18, id: '001'},\r\n];\r\n\r\nexport default function personReducer(preState = initState, action) {\r\n  const {type, data} = action\r\n  switch (type) {\r\n    case ADD_PERSON:\r\n      // return返回值是进行的浅拷贝比较，需要返回不同于preState的新值\r\n      return [data, ...preState];\r\n    default:\r\n      return preState;\r\n\r\n  }\r\n}\r\n","// 汇总reducer\r\nimport {combineReducers} from 'redux'\r\nimport count from \"./count\";\r\nimport person from \"./person\";\r\n\r\nexport default combineReducers({\r\n  count,\r\n  person\r\n});\r\n","/*\r\n* Reducers 指定了应用状态的变化如何响应 actions 并发送到 store 的，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state\r\n* 1. 该文件是用于创建一个为Count组件服务的reducer, reducer的本质是一个函数\r\n* 2. reducer函数会接到两个参数，分别为：之前的状态preState,动作对象action ({type,data} = action)\r\n* */\r\nimport {INCREMENT, DECREMENT} from \"../constant\";\r\n\r\nconst initState = 0; // 初始状态值\r\n\r\nexport default function countReducer(preState = initState, action) {\r\n  const {type, data} = action;\r\n  switch (type) {\r\n    case INCREMENT:\r\n      return preState + data;\r\n    case DECREMENT:\r\n      return preState - data;\r\n    default: // 默认返回初始值\r\n      return preState;\r\n  }\r\n}\r\n","// 引入createStore\r\nimport {createStore, applyMiddleware} from 'redux'\r\n// 引入redux-thunk用于支持异步action\r\nimport thunk from 'redux-thunk'\r\n// 引入工具插件\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nimport reducers from './reducers/index'\r\n\r\n// 创建并暴露store\r\nexport default createStore(reducers, composeWithDevTools(applyMiddleware(thunk)))\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n  /* 此处需要Provider包裹App, 目的让App索引的后代容器组件都能接收到store */\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root'))\r\n"],"sourceRoot":""}